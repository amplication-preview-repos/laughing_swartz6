/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Agency } from "./Agency";
import { AgencyCountArgs } from "./AgencyCountArgs";
import { AgencyFindManyArgs } from "./AgencyFindManyArgs";
import { AgencyFindUniqueArgs } from "./AgencyFindUniqueArgs";
import { CreateAgencyArgs } from "./CreateAgencyArgs";
import { UpdateAgencyArgs } from "./UpdateAgencyArgs";
import { DeleteAgencyArgs } from "./DeleteAgencyArgs";
import { OrderFindManyArgs } from "../../order/base/OrderFindManyArgs";
import { Order } from "../../order/base/Order";
import { AgencyService } from "../agency.service";
@graphql.Resolver(() => Agency)
export class AgencyResolverBase {
  constructor(protected readonly service: AgencyService) {}

  async _agenciesMeta(
    @graphql.Args() args: AgencyCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Agency])
  async agencies(@graphql.Args() args: AgencyFindManyArgs): Promise<Agency[]> {
    return this.service.agencies(args);
  }

  @graphql.Query(() => Agency, { nullable: true })
  async agency(
    @graphql.Args() args: AgencyFindUniqueArgs
  ): Promise<Agency | null> {
    const result = await this.service.agency(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Agency)
  async createAgency(@graphql.Args() args: CreateAgencyArgs): Promise<Agency> {
    return await this.service.createAgency({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Agency)
  async updateAgency(
    @graphql.Args() args: UpdateAgencyArgs
  ): Promise<Agency | null> {
    try {
      return await this.service.updateAgency({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Agency)
  async deleteAgency(
    @graphql.Args() args: DeleteAgencyArgs
  ): Promise<Agency | null> {
    try {
      return await this.service.deleteAgency(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Order], { name: "orders" })
  async findOrders(
    @graphql.Parent() parent: Agency,
    @graphql.Args() args: OrderFindManyArgs
  ): Promise<Order[]> {
    const results = await this.service.findOrders(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
