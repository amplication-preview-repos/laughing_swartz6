/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Agency as PrismaAgency,
  Order as PrismaOrder,
} from "@prisma/client";

export class AgencyServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.AgencyCountArgs, "select">): Promise<number> {
    return this.prisma.agency.count(args);
  }

  async agencies(args: Prisma.AgencyFindManyArgs): Promise<PrismaAgency[]> {
    return this.prisma.agency.findMany(args);
  }
  async agency(
    args: Prisma.AgencyFindUniqueArgs
  ): Promise<PrismaAgency | null> {
    return this.prisma.agency.findUnique(args);
  }
  async createAgency(args: Prisma.AgencyCreateArgs): Promise<PrismaAgency> {
    return this.prisma.agency.create(args);
  }
  async updateAgency(args: Prisma.AgencyUpdateArgs): Promise<PrismaAgency> {
    return this.prisma.agency.update(args);
  }
  async deleteAgency(args: Prisma.AgencyDeleteArgs): Promise<PrismaAgency> {
    return this.prisma.agency.delete(args);
  }

  async findOrders(
    parentId: string,
    args: Prisma.OrderFindManyArgs
  ): Promise<PrismaOrder[]> {
    return this.prisma.agency
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .orders(args);
  }
}
