/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Line } from "./Line";
import { LineCountArgs } from "./LineCountArgs";
import { LineFindManyArgs } from "./LineFindManyArgs";
import { LineFindUniqueArgs } from "./LineFindUniqueArgs";
import { CreateLineArgs } from "./CreateLineArgs";
import { UpdateLineArgs } from "./UpdateLineArgs";
import { DeleteLineArgs } from "./DeleteLineArgs";
import { LineService } from "../line.service";
@graphql.Resolver(() => Line)
export class LineResolverBase {
  constructor(protected readonly service: LineService) {}

  async _linesMeta(
    @graphql.Args() args: LineCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Line])
  async lines(@graphql.Args() args: LineFindManyArgs): Promise<Line[]> {
    return this.service.lines(args);
  }

  @graphql.Query(() => Line, { nullable: true })
  async line(@graphql.Args() args: LineFindUniqueArgs): Promise<Line | null> {
    const result = await this.service.line(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Line)
  async createLine(@graphql.Args() args: CreateLineArgs): Promise<Line> {
    return await this.service.createLine({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Line)
  async updateLine(@graphql.Args() args: UpdateLineArgs): Promise<Line | null> {
    try {
      return await this.service.updateLine({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Line)
  async deleteLine(@graphql.Args() args: DeleteLineArgs): Promise<Line | null> {
    try {
      return await this.service.deleteLine(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
